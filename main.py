import json
import logging
from parser import parse_vacancies
from database import init_db, save_vacancies_to_db, get_sample_from_db
from config import DEFAULT_QUERY, DEFAULT_AREA, DEFAULT_PAGES, JSON_FILE

LOG_FILE = "app.log"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def save_to_json(vacancies, filename=JSON_FILE):
    try:
        data = [v.model_dump() for v in vacancies]
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –≤ {filename}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ JSON: {e}")

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ hh.ru —Å ORM –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")

    try:
        init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return

    query = input("üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (Enter –¥–ª—è 'python'): ").strip() or DEFAULT_QUERY
    area = input("üåç –†–µ–≥–∏–æ–Ω (1 ‚Äî –ú–æ—Å–∫–≤–∞, 2 ‚Äî –°–ü–±, Enter –¥–ª—è 1): ").strip() or str(DEFAULT_AREA)
    pages = input("üìÑ –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–∞—Ä—Å–∏—Ç—å? (Enter –¥–ª—è 3): ").strip() or str(DEFAULT_PAGES)

    try:
        area = int(area)
        pages = int(pages)
        logger.info(f"üîé –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –∑–∞–ø—Ä–æ—Å='{query}', —Ä–µ–≥–∏–æ–Ω={area}, —Å—Ç—Ä–∞–Ω–∏—Ü={pages}")
    except ValueError:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        area = DEFAULT_AREA
        pages = DEFAULT_PAGES

    try:
        vacancies = parse_vacancies(query, area=area, pages=pages)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        return

    if not vacancies:
        logger.warning("üòî –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å.")
        return

    try:
        saved_count = save_vacancies_to_db(vacancies)
        save_to_json(vacancies)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    logger.info(f"üìä –ò—Ç–æ–≥–∏:")
    logger.info(f"   –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(vacancies)}")
    logger.info(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î): {saved_count}")
    logger.info(f"   –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {len(vacancies) - saved_count}")
    try:
        sample = get_sample_from_db(3)
        logger.info("üìã –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        for title, company, salary in sample:
            logger.info(f"   üíº {title} | üè¢ {company} | üí∞ {salary}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞–∑—Ü–∞ –∏–∑ –ë–î: {e}")

    logger.info("üèÅ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")

if __name__ == "__main__":
    main()